import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

import xf_tgdb as xftgdb

config = xftgdb.load_config('config.json')
DSN = xftgdb.dsn(config)
engine = xftgdb.sq.create_engine(DSN)
xftgdb.create_db(engine)
Session = xftgdb.sessionmaker(bind=engine)
session = Session()

xftgdb.import_words(session)

print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = config['bot_token']
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = xftgdb.get_users(session)
userStep = {}
buttons = []

# print()
    
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    '''Class for buttons and reply messages'''
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    CANCEL = '–û—Ç–º–µ–Ω–∞ ‚ùå'
    YES = '–î–∞ ‚úÖ'

def show_hint(*lines):
    '''Show hints, joining lines with '\n'''
    return '\n'.join(lines)

@bot.message_handler(commands=['start'])
def create_cards(message, step=0):
    '''Create cards for user
    step = 0 - for user who just started bot,
    else step = 1'''
    cid = message.chat.id
    if cid not in known_users:
        xftgdb.add_new_user(session, cid)
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, f"Hello, new user {message.from_user.username}, let study English...")
    else:
        if step == 0: bot.send_message(cid, f"Hello, {message.from_user.username}, I already know you!")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    word_tuple = xftgdb.get_random_word(session, cid)
    if not word_tuple:
        markup.add(types.KeyboardButton(Command.ADD_WORD))
        bot.send_message(cid, "–í –±–∞–∑–µ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ?", reply_markup=markup)
        return
    target_word = word_tuple[1]
    translate = word_tuple[0]

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = xftgdb.get_other_words(session, cid, target_word)
    # others = ['Green', 'White', 'Hello']  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([add_word_btn, delete_word_btn, next_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    '''Handler for NEXT button'''
    create_cards(message, 1)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    '''Handler for DELETE_WORD button'''
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        xftgdb.delete_word(session, message.from_user.id, data['translate_word'])
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {data['translate_word']} —É–¥–∞–ª–µ–Ω–æ")
        print(f'–°–ª–æ–≤–æ {data["target_word"]} —É–¥–∞–ª–µ–Ω–æ —É {message.from_user.id}')  # —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î
    create_cards(message, step=1)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    '''Handler for ADD_WORD button'''
    cid = message.chat.id
    userStep[cid] = 1
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton(Command.CANCEL))
    bot.send_message(cid, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ(ru):", reply_markup=markup)
    bot.register_next_step_handler(message, get_ru_word)
def get_ru_word(message):
    '''Get russian word from user'''
    cid = message.chat.id
    if message.text == Command.CANCEL:
        create_cards(message,1)
    elif message.text == None:
        bot.send_message(message.chat.id, f"–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ(ru):")
        bot.register_next_step_handler(message, get_ru_word)
    elif xftgdb.is_cyrillic(message.text):
        target_word = xftgdb.translate_word(message.text, token=xftgdb.ya_token)
        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(types.KeyboardButton(Command.YES), types.KeyboardButton(Command.CANCEL))
        if target_word:
            answer = f'{target_word} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥?\n–ï—Å–ª–∏ –¥–∞ - –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º\n–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥'
        else:
            answer = f'–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ {message.text} –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
        bot.send_message(cid, answer, reply_markup=markup)
        bot.register_next_step_handler(message, get_en_word, message.text, target_word)
    else:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏")
        bot.register_next_step_handler(message, get_ru_word)

def get_en_word(message, word, target_word):
    '''Get english word from user'''
    def send_to_add_db(message, tid, word, target_word):
        add_word_to_db(tid, word, target_word)
        create_cards(message, 1)
    tid = message.from_user.id
    if message.text == Command.CANCEL:
        create_cards(message,1)
    elif message.text == Command.YES:
        send_to_add_db(message, tid, word, target_word)
    else:
        if message.text == None:
            bot.send_message(message.chat.id, f"–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ {word}:")
            bot.register_next_step_handler(message, get_en_word, word, target_word)
        elif xftgdb.is_english(message.text):
            send_to_add_db(message, tid, word, message.text)
        else:
            bot.send_message(message.chat.id, f"–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ {word}:")
            bot.register_next_step_handler(message, get_en_word, word, target_word)



def add_word_to_db(tid, word, translate):
    '''Add new word to user dictionary'''
    resp = xftgdb.add_new_word(session, tid, word, translate)
    if resp == 1:
        bot.send_message(tid, f"–°–ª–æ–≤–æ {word} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º {translate} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        bot.send_message(tid, f"–°–ª–æ–≤–æ {word} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º {translate} –¥–æ–±–∞–≤–ª–µ–Ω–æ")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    '''Handler for messages'''
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

try:
    bot.infinity_polling(skip_pending=True)
except Exception as e:
    print(f"Error connecting to bot\n {e}")